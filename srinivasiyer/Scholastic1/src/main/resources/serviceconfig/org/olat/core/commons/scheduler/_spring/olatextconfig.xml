<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- 

*****************************
Scheduler system for OLAT   *
*****************************
You can either create simple jobs which are executed like every minute or hour or jobs
which are configured with cron style syntax.

If you would like to expose your beans to the Jconsole for accessing your properties add them
to the MBeanExporter Bean at the end.

How to add a new job:
1. Create you class which extends from QuartzJobBean see ChangePresenceJob as example
2. Create a file called "olatextconfig.xml" with your own beans and place it in the same directory as this file. It will be loaded automatically.
3. Add a bean definition where your job is created like ="<bean id="changePresenceJob" class="org.springframework.scheduling.quartz.JobDetailBean">"
4. Create a scheduler for your definded bean: Either an SimpleTriggerBean or an CronTriggerBean
5. Add your trigger bean to the SchedulerFactoryBean list.
-->


<!-- this tells spring to create the quartz scheduler -->
<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" depends-on="database">
	<property name="quartzProperties">
		<props>
			<prop key="org.quartz.threadPool.threadCount">5</prop>
		</props>
	</property>
	<property name="triggers">
        <list>
        	<!-- Include every bean here that should be scheduled -->
            <ref bean="sendNotificationsEmailTrigger" />
            <ref bean="changePresenceJobTrigger" />
            <!-- <ref bean="dumpJMXJobTrigger"/> -->
            <ref bean="registrationTrigger"/>
		    <!--
			<ref bean="translationToolStatusGeneratorTrigger"/>
			-->
            <ref bean="updateStatisticsTrigger"/>
            <ref bean="searchIndexingTrigger"/>
            <ref bean="updateQtiResultsTrigger${assessmentplugin.activate}" />
            <ref bean="invitationCleanupTrigger" />
            <ref bean="epDeadlineTrigger" />
        </list>
    </property>
</bean>

<!-- add referenced schedulers here -->

<!-- triggers the job that either sends the instant messaging status to away or does logout of idle users. This is done because in the ajax mode may keep sending polling
requests and therefore the session in never invalidated --> 
<bean id="changePresenceJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="jobDetail" ref="changePresenceJob" />
    <!-- 5 minute -->
    <property name="startDelay" value="300000" />
    <!-- repeat every minute -->
    <property name="repeatInterval" value="60000" />
</bean>

<!-- Only needed in cluster mode, dumps jmx info to disc --> 
<bean id="dumpJMXJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="jobDetail" ref="dumpJMXJob" />
    <!-- 5 minute -->
    <property name="startDelay" value="300000" />
    <!-- repeat every 10 seconds (dmps the data to disk) -->
    <property name="repeatInterval" value="60000" />
</bean>

<bean id="registrationTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="jobDetail" ref="registrationJob" />
    <!-- 10 minutes-->
    <property name="startDelay" value="600000" />
    <!-- repeat every 10 seconds -->
    <property name="repeatInterval" value="10000" />
    <!-- never repeat -->
    <property name="repeatCount" value="0"/>
</bean>

<bean id="translationToolStatusGeneratorTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	<!-- Status generation is only needed for a translationserver. -->
    <property name="jobDetail" ref="translationToolStatusGeneratorJob.${is.translation.server}" />
    <property name="cronExpression" value="0 15 * * * ?" />
	<!-- OLAT-5093 start delay ensures there's no conflict with server startup and db not being ready yet -->
    <property name="startDelay" value="300000" />
</bean>





<!-- Example bean for cron style scheduling--> 
<!-- OLAT-5093 start delay ensures there's no conflict with server startup and db not being ready yet -->
<!--
<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
    <property name="jobDetail" ref="exampleJob" />
    <property name="cronExpression" value="0 0 6 * * ?" />
    <property name="startDelay" value="300000" />
</bean>
 -->
 
 <!-- enabled version -->
<bean id="translationToolStatusGeneratorJob.enabled" class="org.springframework.scheduling.quartz.JobDetailBean"   lazy-init="true">
	<property name="jobClass" value="org.olat.core.util.i18n.I18nTranslationStatusGeneratorJob" />
</bean>

<!-- dummy bean -->
<bean id="translationToolStatusGeneratorJob.disabled" class="org.springframework.scheduling.quartz.JobDetailBean"  lazy-init="true">
	<property name="jobClass" value="org.olat.core.commons.scheduler.DummyJob" />
</bean>



<!--  job definition  -->
<bean id="changePresenceJob" class="org.springframework.scheduling.quartz.JobDetailBean">
  <property name="jobClass" value="org.olat.instantMessaging.rosterandchat.ChangePresenceJob" />
  <property name="jobDataAsMap">
    <map>
    	<!-- default is 5 minutes - values are milliseconds -->
    	<entry key="idleWaitTime" value="300000" />
    	<!-- default is 60 minutes  - values are milliseconds -->
    	<entry key="initialAutoLogOutCutTime" value="3600000" />
    </map>
  </property>
</bean>

<!--  job definition  -->
<bean id="dumpJMXJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	<property name="jobClass" value="org.olat.admin.jmx.DumpJMXJob"/>
	<property name="jobDataAsMap">
    <map>
    	<!-- either true or false -->
    	<!-- TODO:gs make configurable via olat.properties file -->
    	<entry key="enabled" value="true" />
    	<!-- List of dumping beans, key must end with 'Bean'  -->
    	<entry key="ThreadAndControllerInfoBean" value="org.olat.admin.jmx.datasources:name=ThreadAndControllerInfo" />
    	<entry key="FilesInfoMBean" value="org.olat.core.commons.modules.bc:name=FilesInfoMBean" />
    </map>
  </property>
</bean>

<bean id="registrationJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	<!-- Creates after OLAT Startup a Cron Job to send registration data on weekly base -->
	<property name="jobClass" value="org.olat.admin.registration.SystemRegistrationJobStarter"/>
</bean>

<!--
	Export your Beans via JMX, to enable start you JVM with "-Dcom.sun.management.jmxremote=true".
	This only enables JMX locally and allows you to connect with the same user. To connect via remote read:
	http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html
-->
<!-- this bean must not be lazily initialized if the exporting is to happen -->
<!-- Use Exporter in org.olat.olatextconfig.xml
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
	  <property name="beans">
	    <map>
	      <entry key="bean:name=changePresence" value-ref="changePresenceJob"/>
	    </map>
	  </property>
	</bean>
-->

	<!-- SEARCH INDEXING CONFIGURATION -->

	<bean id="searchIndexingTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="org.olat.search.job.${search.indexing.cronjob}" />
	    <property name="cronExpression" value="${search.indexing.cronjob.expression}" />
		<!-- OLAT-5093 start delay ensures there's no conflict with server startup and db not being ready yet -->
	    <property name="startDelay" value="300000" />
	</bean>
	
	<bean id="org.olat.search.job.enabled" class="org.springframework.scheduling.quartz.JobDetailBean" lazy-init="true">
	  <property name="jobClass" value="org.olat.search.service.indexer.SearchIndexingJob"/>
	</bean>
	
	<!-- dummy bean -->
	<bean id="org.olat.search.job.disabled" class="org.springframework.scheduling.quartz.JobDetailBean"  lazy-init="true">
		<!-- NOTE: reusing the notifications.DummyJob here -->
		<property name="jobClass" value="org.olat.core.commons.scheduler.DummyJob" />
	</bean>
	
	<bean id="updateQtiResultsTriggerOlat" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="updateQtiResults.disabled" />
	    <property name="cronExpression" value="0 0 2 * * ?"/><!-- 2am, daily -->
	</bean>
	
	<bean id="updateQtiResults.disabled" class="org.springframework.scheduling.quartz.JobDetailBean">
		<!-- NOTE: reusing the notifications.DummyJob here -->
		<property name="jobClass" value="org.olat.core.commons.scheduler.DummyJob" />
	</bean>

</beans>
